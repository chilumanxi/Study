//-------------串的定长顺序表示------------------
#define MAXSTRLEN 255  //用户可以在255以内定义最大串长
typedef unsigned char SString[MAXSTRLEN + 1];   //0号单元存放串的长度

1.串联接 
假设S1，S2和T都是SString型的串变量，且串T是由串S1联结串S2得到的。
三种情况：
（1）S1[0] + S2[0] <= MAXSTRLEN 
此时，S1和S2都可以在新的T中
（2）S1[0] + S2[0] > MAXSTRLEN && S1[0] <= MAXSTRLEN
此时，S1的全部和S2的一部分在T中
（3）S1[0] > MAXSTRLEN
此时， S1的一部分在T中
Status Concat(SString &T, SString S1, SString S2){
	//用T返回由S1和S2联结而成的新串，若未截断，则返回TRUE，否则返回FALSE
	 if(S1[0] + S2[0] <= MAXSTRLEN){
		 T[1..S1[0]] = S1[1..S1[0]];
		 T[S1[0] + 1..S1[0] + S2[0]] = S2[1..S2[0]];
		 T[0] = S1[0] + S2[0];
		 uncat = TRUE;
	 }
	 else if(S1[0] < MAXSTRLEN){
		 T[1..S1[0]] = S1[1..S1[0]];
		 T[S1[0]..MAXSTRLEN] = S2[1..MAXSTRLEN - S1[0]];
		 T[0] = MAXSTRLEN;
		 uncat = FALSE;
	 }
	 else{
		 T[0..MAXSTRLEN] = S1[0..MAXSTRLEN];
		 T[0] = MAXSTRLEN;
		 uncat = FALSE;
	 } 
	 return uncat;
} //Concat

2.求子串
Status SubString(SString &Sub, SString S, int pos, int len){
	//用Sub返回串S的第pos个字符起长度为len的子串
	//其中，1 <= pos <= StrLength(S) 且 0 <= len <= StrLength(S) - pos + 1
	if(pos < 1 || pos > S[0] || len < 0 || len > S[0] - pos + 1)
		return ERROR;
	Sub[1..len] = S[pos..pos + len -1];
	Sub[0] = len;
	return OK;
}//SubString

我们可以看到，如果出现长度超过MAXSTRLEN的情况，就只能截断，所以为了解决这种问题，我们应该动态分配串值的存储空间


//-----------------堆分配存储表示-----------------
typedef struct{
	char *ch;         //若是非空串，则按串长分配存储区，否则ch为NULL
	int length;       //串长度
}HString;

1.串插入

Status StrInsert(HString &S, int pos, HString T){
	// 1 <= pos <= StrLength(S) + 1 在串的第pos个字符之前插入串T
	if(pos < 1 || pos > S.length + 1)
		return ERROR;
	if(T.length){
		if(!(S.ch = (char *)realloc(S.ch, (S.length + T.length) * sizeof(char))))
			exit(OVERFLOW);
		for(i = S.length - 1; i >= pos - 1; -- i)
			S.ch[i + T.length] = S.ch[i];
		S.ch[pos - 1..pos + T.length - 2] = T.ch[0..T.length - 1];
		S.length += T.length;
	}
	return OK;
}//StrInsert

//------------堆分配基本操作--------------------
Status StrAssign(HString &T, char *chars){
	//生成一个其值等于串常量chars的串T
	if(T.ch) 
		free(T.ch);      //释放T原有空间
	for(i = 0, c = chars; *c ; ++ i, ++ c);        //计算chars长度 
	if(!i){
			T.ch = NULL;
			T.length = 0;
	}
	else {
		if(!(T.ch = (char *)malloc(i * sizeof(char))))
			exit(OVERFLOW);
		T.ch[0..i - 1] = chars[0..i - 1];
		T.length = i;
	}
	return OK;
}//StrAssign

int StrLength(HString S){
	//返回S的元素个数
	return S.length;
}// StrLength

int StrCompare(HString S, HString T){

}
