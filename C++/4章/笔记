字符串输入的时候，cin使用空白(空格，制表符，换行符)来确定字符串的结束位置，这就意味着cin在获取字符数组输入时只读取一个单词。读取该单词后，cin将该字符串放在数组中，并自动在结尾添加空字符。也就是如果你输入New York的话，相当于输入两个字符串New和York。

为了解决上面说的问题，一般采用每次读取一行字符串的输入。istream中的类(如cin)提供了一些面向行的成员函数如getline()和get()。这两个函数读取一行输入，直到到达换行符。getline()将抛弃换行符, 以'\0'代替，而get()将保留换行符在输入序列中

面向行的输入:getline()
cin.getline()有两个参数，第一个参数用来存储输入行的数组的名称。第二个参数是要读取的字符数。如果这个参数为20，则函数最多读取19个字符，余下的空间用于存储自动在结尾处添加的空字符。getline()成员函数在读取指定数目的字符或遇到换行符时停止读取

面向行的输入:get()
get的一种使用与getline类似，但是问题是它并不再读取并丢弃换行符，而是将其留在输入队列中。假设我们连续两次调用get()的话，第二次就不会发现任何读取的内容。所以一般这样使用：
cin.get(name, ArSize);
cin.get();
cin.get(dessert, ArSize);
另外一种使用方法使用get()的方式是将两个类成员函数拼接起来(合并)，如下：
cin.get(name, ArSize).get();    //concatenate member functions(串联成员函数)
根据函数重载，编译器对没有参数的get会采取读取一个字符的功能

当getline()或get()读取空行时，最初的做法是，下一条输入语句将在前一条getline()或get()结束读取的位置开始读取；但是当前的做法是，当get()(不是getline())读取空行后将设置失效位。这意味着接下的输入将被阻断，但可以用下面的命令来恢复输入：
cin.clear();
另一个潜在的问题是，输入字符串可能比分配的空间长，如果输入行包含的字符数比指定的多，则getline()和get()将把余下的字符留在输入队列中，而getline()还会设置失效位，并关闭后面的输入。

string类位于名称空间std中，因此必须提供一条using编译指令。或者使用std::string来引用它。
类设计能够让程序自动处理string的大小。例如str1的声明创建一个长度为0的string对象，但程序将输入读取到str1中时，将自动调整str1的长度
不能将一个数组赋给另一个数组，但是可以将一个string对象赋给另一个string对象
string类简化了字符串合并操作，可以使用运算符+将两个string对象合并起来，同样可以用+=将字符串附加到string对象的末尾
