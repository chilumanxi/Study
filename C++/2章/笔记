C++ 风格的注释是双斜杠"//"， 而C风格的注释是"/* */"

名称空间的概念
如果使用iostream而不是iostram.h，则应使用下面的名称空间编译指令来使iostream中的定义对程序可用 using namespace std;
这叫做using编译指令
名称空间支持是一项C++特性，旨在让用户编写大型程序以及将多个厂商现有的代码组合起来的程序时更容易
如下：
 Microflop:wanda("go dancing?");            //use Microflop namespace version
 Piscine::wanda("go dacing?");              //use Piscine namespace version

按照这种方式，类，函数和变量便是C++编译器的标准组件，他们现在都被放置在名称空间std中。仅当头文件没有拓展名.h时，情况才是如此，这意味着在iostream中定义的用于输出的cout变量实际上是std::cout，而endl实际上是std::endl，因此，可以省略编译指令using，以下述方式进行编码

std::cout << "Come up and C++ me some time.";
std::cout << std::endl;
多数用户并不喜欢将引入名称空间之前的代码转换为名称空间代码。除非他们可以不费力的完成这种转换，于是using编译指令应运而生
下面这一行代码表明，可以使用std名称空间中定义的名称而不必使用std::前缀
using namespace std;        //lazy approach all names available

这个using编译指令使得std名称空间中的所有名称都可用，在大型项目中存在潜在的问题。更好的解决方法是，使所需的名称通过using声明来实现，例如：
using std::cout;   //make cout available
using std::endl;   //make endl available
using std::cin;    //make cin available
这样就可以使cout endl和cin在无需加std::的时候可以使用

对象的长处：不需要了解对象的内部情况，就可以使用它。只需要知道它的接口。如一个字符串string，cout对象有个简单的接口，则下面代码将会显示该字符串:
cout << string;

cout显示字符串的过程：从概念上看，输出是一个流，即从程序流出的一系列字符。cout对象表示这种流，其属性是在iostream文件中定义的。cout的对象属性包括一个插入运算符符(<<)，它可以将其右侧的信息插入流中。注意下面语句：
cout << "Come up and C++ me some time."
它将字符串"Come up and C++ me some time"插入倒输出流中，因此，与其说程序显示了一条消息，不如说它将一个字符串插入到了输出流中

C++通过重载，使得运算符有了不同的含义，编译器通过上下文确定运算符的含义，C中的&运算符既表示按位与，也可以作为去地址，也是运算符重载的例子。C++扩展了运算符重载的概念。允许为用户定义的类型(类)重新定义运算符的含义

C++也将输入看作是流入程序的字符流。输入时，cin使用>>运算符从输入流中抽取字符。通常，需要在运算符右侧提供一个变量。以接收抽取的信息。cin也是智能对象，可以将键盘输入的一系列字符转换为接收信息的变量能接受的形式。

类的简介：
类是用户定义的一种数据类型。要定义类，需要描述它能够表示什么信息和可对数据执行哪些操作。类之于对象就像类型之余变量。也就是说，类定义描述的是数据格式及其用法。而对象则是根据数据格式规范创建的实体。
如我们声明变量  int carrots;
上面的代码将创建一个类型为int的变量。也就是说，carrots可以存储整数，可以按特定的方式使用
而cout，他是一个ostream类对象。ostream类定义(iosteam文件的另一个成员)描述了ostram对象表示的数据以及可以对它执行的操作，如将数字或字符串插入倒输出流中。

作为用户，并没有设计osteam和istream类，就像函数可以来自函数库一样，类也可以来自类库。上述两种类就属于这样的情况。从技术上说，它们没有被内置到C++语言中，而是语言标准指定的类
这些类定义位与iostream文件中，没有被内置到编译器中。如果愿意，程序员甚至可以修改这些类定义(不是一个好主意)，C++大量支持UNIX等编程的类库

类描述指定了可对类对象执行的所有操作。要对特定对象执行这些允许的操作，需要给该对象发送一条消息，例如如果希望cout对象显示一个字符串，应向它发送一条消息，告诉它，“对象！显示这些内容！”C++提供了两种发送消息的方式：一种方式是使用类方法(本质上就是函数调用)；另一种方式就是重新定义运算符，cin和cout就是采用的这种方式。他们使用<<和>> 发送给cout和cin

不要混淆函数原型和函数定义。可以看出，原型只描述函数接口。也就是说，它描述的是发送给函数的信息和返回的信息。而定义中包含了函数的代码
