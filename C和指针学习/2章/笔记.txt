翻译阶段由几个阶段完成。

（1）组成一个程序的每个（有可能多个）源文件通过编译过程分别转换为目标代码。然后各个目标文件由链接器捆绑在一起，形成一个单一而完整的可执行程序。链接器同时也会引入标准C函数库中任何被该程序所用到的函数，而且它也可以搜索程序员的个人的程序库，将其中需要使用的函数链接到程序中。

（2）源代码经过解析，判断其语句的意思。第二个阶段是产生绝大多数错误和警告信息的地方。随后，便产生目标代码。目标代码是机器指令的初步形式，用于实现程序的语句。如果我们在编译程序的命令行中加入了要求进行优化的选项，优化器就会对目标代码进一步进行处理，使它的效率更高。优化过程需要额外的时间。所以在程序调试完毕并准备生成正式产品之前一般不进行该过程。至于目标代码是直接产生的，还是以汇编语言语句的形式存在，然后再经过一个独立的阶段编译成目标文件。





编译和链接
可用多种方式来调用：
1.编译并链接一个完全包含于一个源文件的C程序：
cc program.c
在这条命令产生一个称为a.out的可执行程序，中间会产生一个名为program.o的目标文件，但它在链接过程完成后会被删除
2.编译并链接几个C源文件
cc main.c sort.c lookup.c
当源文件超过一个时，目标文件便不会删除，这就允许你对程序进行修改后，只对那些进行过改动的源文件进行重新编译，如下一条命令所示。
3.编译一个C源文件，并把它和现存的目标文件链接在一起
cc main.o lookup.o sort.c
4.编译单个C源文件，并产生一个目标文件（如本例中的program.o），以后再进行链接：
cc -c program.c
5.编译几个C源文件，并为每个文件产生一个目标文件：
cc -c mian.c sort.c lookup.c
6.链接几个目标文件
cc main.o sort.o lookup.o




执行
程序的执行也需要经历几个阶段，首先，程序必须载入到内存中，在宿主环境中，这个任务由操作系统来完成，那些不是存储在堆栈中的尚未初始化的变量将在这个时候得到初始值。在独立环境中，程序的载入必须由手工安排，也可能是通过把可执行代码置入只读内存(ROM)来完成

然后程序的执行便开始，在宿主环境中，通常一个小型的启动程序与程序链接在一起。它负责处理一系列日常事物，如收集命名行参数以便使程序能够访问它们。接着调用main函数。

现在便开始执行代码。在绝大多数机器里，程序将使用一个运行时堆栈，它用于存储函数的局部变量和返回地址。程序同时也可以使用静态内存，存储与静态内存中的变量在程序整个执行过程中一直保留它们的值

程序执行的最后一个阶段是终止。正常的终止是main函数的返回。

附：宿主环境即指具有操作系统的环境

三字母词
??( [
??) ]
??! |
??< (
??> }
??' ^
??= #
??/ \
??- ~

三字母词用的比较少，但是一定在输出的时候要小心，如下：
printf("Delete file(are you really sure ??):");
就会产生一个]字符



转义序列或字符转义
由一个反斜杠“\”加上一个或多个其他字符组成，代表反斜杠后面的那个字符，而并不是特殊含义


