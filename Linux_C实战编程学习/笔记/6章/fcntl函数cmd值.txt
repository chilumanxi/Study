(1)F_DUPFD此时，fcntl的功能与dup一样，可以复制由fd指向的文件描述符．调用成功返回新的文件描述符，失败返回-1，错误代码存入errno

(2)F_GETFD
此时，fcntl用来获取文件描述符的close-on-exec标志，调用成功返回标识符，若此标识符最后一位为０，则该标志没有设置，即意味着在执行exec相关函数后文件描述符仍保持打开，
否则在执行exec相关函数时将关闭文件描述符，失败则返回-1

(3)F_SETFD
此时，fcntl用来设置文件描述符的close-on-exec标志为第三个参数arg的最后一位．成功返回0,失败返回-1

(4)F_GETFL
此时，fcntl用来设置文件打开的方式．成功返回标志值，失败返回-1．标志值的含义同open系统调用一致

(5)F_SETFL
此时，fcntl用来设置文件打开的方式为第三个参数arg指定的方式．但是Linux系统只能设置O_APPEND,O_NONBLOCK和O_ASYNC标志，他们的含义和open调用一致

(6)F_SETLK
此时,fcntl系统调用被用来设置或释放锁,当1_type取F_RDLCK或F_WDLCK时,在由1_whence,1_start和1_len指定的区域上设置锁,当1_type取F_UNLCK时则释放锁,如果锁被其他进程占用,则返回-1并设置errno为EACCES或EAGAIN
需要注意的是,当设置一个共享锁(读锁)的时候后,第一个参数fd所指向的文件必须以可读方式打开.当进程结束或文件描述符fd被close系统调用的时候,锁会自动释放.

(7)F_SETLKW
此时fcntl的功能与cmd取F_SETLK时类似,不同的是当希望设置的锁因为存在其他锁而被阻止设置时,该命令会等待相冲突的锁释放

(8)F_GETLK
此时,第三个参数lock指向一个希望设置的锁的属性的结构,如果锁能被设置,该命令并不真的设置锁,而是只修改lock的1_type域为F_UNLCK,然后返回,如果存在一个或多个锁与希望设置的锁互相冲突的话,则fcntl返回其中的一个锁的flock结构.

cmd取(6),(7),(8)时执行成功返回0,当有错误返回-1且错误代码存入errno中

(9)F_GETOWN
此时，返回当前接收SIGIO或SIGURG信号的进程ID或进程组，进程组ID以负值返回

SIGOI信号为文件描述符描述就绪，可以开始进行输入/输出操作
SIGURG信号是有”紧急“数据或out-of-band数据到达socket时产生

(10)F_SETOWN
此时，设置进程或进程组接收SIGIO和SIGURG信号，进程组ID以负值指定，进程ID用正值指定。

(11)F_GETSIG
此时，可以在输入输出时，获得发送的信号

(12)F_SETSIG
此时，设置在输入输出时发送的信号


