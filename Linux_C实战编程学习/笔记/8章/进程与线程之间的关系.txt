线程是计算机中独立运行的最小单位，运行时占用很少的系统资源。由于每个线程占用的CPU时间是由系统分配的。因此可以把线程看成系统分配CPU时间的基本单位。在用户看来，多个线程是同时执行的，但从操作系统调度上看，各个线程是交替执行的。系统不停地在各个线程之间切换，每个线程只有在系统分配给它的时间内才能取得CPU的控制权，执行线程中的代码。
当然这里只是针对单CPU单核的情况，在多CPU多核的主机上，多个线程是可以同时执行的。

在支持多进程的情况下引入多线程原因：
（1）在多进程情况下，每个进程都有自己独立的地址空间，而在多线程的情况下，同一进程内的线程共享进程的地址空间。因此，创建一个新的进程时要耗费时间来为其分配系统资源，而创建一个新的线程花费的时间就少的多。
（2）在系统调度方面。由于进程地址空间独立而线程共享地址空间，线程间的切换速度要远快过进程间的切换速度
（3）在通信进制方面，进程间的数据空间相互独立，彼此通信要以专门的通信方式进行，通信时必须经过操作系统。而同一进程内的多个线程共享数据空间，一个线程的数据可以直接提供给其他的线程使用，而不必经过操作系统。因此，线程间的通信更加方便和省时。

线程可以提高应用程序的响应速度。在图像界面程序中，如果有一个非常耗时的操作，它会导致其他操作不能进行而等待这个操作。此时界面响应用户操作的速度会慢很多。多线程环境下可以将这个非常耗时的操作由一个单独的线程来完成。这个线程在用完操作系统那个分配给它的时间片后，让出CPU，这样其他操作便有机会执行了。

可以提高多处理器效率，现在许多计算机都是采用多核技术，在这种情况下。可以多个线程在不同的处理器上同时运行。从而大大提高程序执行速度。因此多线程更能发挥硬件潜力

可以改善程序结构。对于要处理多个命令的应用程序。可以将对每个命令的处理设计成一个线程。从而避免设计成大程序时造成的程序结构复杂。

线程虽然分享地址空间，打开的文件描述符等资源，但是也私有一些数据信息：
1.线程号 2.寄存器（包括程序计数器和堆栈指针）
3.堆栈 4.信号掩码
5.优先级 6.线程私有的存储空间
