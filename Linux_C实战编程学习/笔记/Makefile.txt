# 代表后面是注释

要使用变量名前面需要加$ 如${变量名}和$(变量名)

命令行属性：Tab后面可以加上以下符号代表不同的意义：
+：本行命令始终被执行，即使用到了-n -q -t等选项
-：执行本命令行的命令时如果遇到错误，继续执行而不退出make
@：执行本命令时不在屏幕上打印命令的内容

伪目标：将一个目标声明为伪目标的方法是将它作为特殊目标".PHONY"的依赖下。这样make在执行此规则的时候不会试图去查找该目标的依赖文件。这样既提高了make的效率，也不用担心目标和文件名重名的问题。

.IGNORE : 对于目标".IGNORE"后面跟的依赖文件，生成这些依赖文件的命令在执行时如果遇到错误，将不退出make，类似于命令行中"-"的作用

.SUFFIXES : 该目标的依赖被认为是一个后缀列表，在检查后缀规则时使用

.SILENT : 对于该目标的依赖文件，执行生成依赖文件的命令时，make不会打印出所执行的命令。如果后面没有依赖文件的话，则执行Makefile所有命令都不会打印

.PRECIOUS : 该目标的依赖文件会受到特别对待，如果make被kill命令终止或者遇到特殊情况而被终止，这些依赖并不会被删除。而且如果这些依赖文件是中间文件，在不需要时也不会被删除

.INTERMEDIATE : 该目标的依赖文件在make执行时被当做中间文件对待，如果其后没有依赖文件，则没有意义

搜索目录：

VPATH ： make可以识别该特殊变量，通过该变量可以指定依赖文件的搜索目录。当规则的依赖文件在当前目录不存在时，make会在此变量所制定的目录下去寻找这些依赖文件。使用方法是用空格或者冒号”：“将多个搜索目录分开，搜索时，按照定义的目录顺序进行。例如：VPATH = /usr/src:../headers 这样就是两个搜索目录。

vpath : 这是个make的关键字，使用方法如下：
	（1）vpath<pattern><directories> 为符合模式<pattern>的文件指定搜索目录<directories>
	（2）vpath<pattern>清除符合模式<pattern>的文件的搜索目录
	（3）vpath 清除所有已经设置好的搜索目录
<pattern>中需要包含"%"字符，意思是匹配零或多个字符。例如%.h就是所有以.h结尾的文件。
连续使用vpath时，如果出现了相同的pattern或者被重复了的pattern的话，make会按照vpath语句的先后顺序来执行搜索

变量的定义：
通过":=" 赋值的变量立即展开变量 通过"="赋值的变量是递归展开变量。举例：
CFLAGS := $(include_dirs) -O
include_dirs := -lfoo -lbar
此时CFLAGS将是-O因为直接展开的话include_dirs未定义，值为空

Makefile中还有一个"=?"条件赋值符，这个符号的意思是，只有在次变量在之前没有赋值的情况下才会对这个变量进行赋值。
'+='对其值进行追加。利用此符号。

常见的预定义变量：
宏名                   初始值                   说明
CC                     cc                       默认是用的编译器
CFLAGS                 -O                       编译器使用的选项
MAKE                   make                     make命令
MAKEFLAGS              空                       make命令的选项
SHELL                                           默认的shell类型
PWD                                             运行make时的当前目录
AR                     ar                       库管理命令
ARFLADS                -ruv                     库管理命令选项
LIBSUFFIXE             -a                       库的后缀
A                      a                        库的拓展名

自动变量：
$@ : 表示一个规则中的目标文件名。如果目标是一个文档文件(一般在linux下称.a文件为文档文件也称为静态库文件)，那么它代表这个文件名。例如：
file1.o file2.o: header.h
	cp $@ /backup
这条规则的功能就是当目标文件过时时，将原来的文件备份到/backup目录下，然后重新生成新的目标文件。哪个目标文件需要更新，$@就代表哪个文件

$% : 当规则的目标文件是一个静态库文件的时候，$%代表静态库的一个成员名。如果目标文件不是静态库文件的话，那么$@的值为空

$< : 规则中的第一个依赖文件，但是如果使用了隐含规则的话，那其就是隐含规则引入的第一个依赖文件名。

$> ：和$%一样也只是用于库文件，它的值为库名

$? : 所有比目标文件新的依赖文件列表以空格分隔。如果目标是静态库文件，代表的是库成员。

$^ : 规则的所有依赖文件列表，以空格分格，如果目标是静态库文件，那么代表的是所有的库成员(.o文件)。它会去掉重复的依赖文件

$+ : 类似于$^但是它保留依赖文件中重复出现的文件。主要用在程序链接时库的交叉引用场合

$* : 他的值是目标文件去掉后缀后的名称
